풀이 1.
function solution(board, moves) {
    let bucket = [];
    let result = 0;
    
    for(let i = 0; i < moves.length; i++) {
        let pick = moves[i]-1;
        
        for(let j = 0; j < board.length; j++) {
            if(board[j][pick] === 0) {
                continue;
            } else {
                if(bucket[bucket.length-1] === board[j][pick]) {
                    bucket.pop();
                    result += 2;
                    board[j][pick] = 0;
                    break;
                } else {
                    bucket.push(board[j][pick]);
                    board[j][pick] = 0;
                    break;
                }
            }
        }
    }
    
    return result;
}


// 풀이 2.
function solution(board, moves) {
    const stack = new Array(board.length).fill(0).map(() => [])
    const bucket = [];
    let result = 0;
    
    for(let i = 0; i < stack.length; i++) {
        for(let j = board.length-1; j >= 0; j--) {
            let doll = board[j][i];
            
            if(doll !== 0) stack[i].push(doll);
        }
    }
    
    for(let i = 0; i < moves.length; i++) {
        let pick = moves[i]-1;
        
        if(stack[pick].length !== 0) {
           const pick_top_doll = stack[pick].pop();
          
                if(bucket[bucket.length-1] === pick_top_doll) {
                    bucket.pop();
                    result += 2;
                } else bucket.push(pick_top_doll);
             
        } else {
            continue;
        }
    }
    
    return result;
}
